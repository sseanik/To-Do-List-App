{"version":3,"sources":["Components/Header.js","Components/Tasks.js","Components/TaskForm.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","display","breakpoints","up","search","right","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginLeft","width","searchIcon","padding","height","pointerEvents","alignItems","justifyContent","inputRoot","color","inputInput","paddingLeft","transition","transitions","create","Header","onSearchTask","classes","className","AppBar","Toolbar","Typography","variant","noWrap","InputBase","placeholder","input","inputProps","onChange","e","target","value","Tasks","tasks","onDeleteTask","onEditTask","onEditSearchTask","onDeleteSearchTask","useState","checks","setChecks","taskToEdit","setNewTask","newTaskDescription","setNewDescription","open","setOpen","handleClose","List","map","task","ListItem","key","id","Checkbox","a","checked","fetch","method","headers","body","JSON","stringify","ok","checkNum","ListItemText","description","IconButton","aria-label","onClick","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","TextField","autoFocus","margin","label","type","fullWidth","defaultValue","DialogActions","Button","TaskForm","onNewTask","onNewSearchTask","taskToAdd","setDescription","Paper","style","marginTop","marginBottom","Grid","container","xs","md","item","paddingRight","length","newTask","res","json","then","data","chooseTaskList","searchTasks","App","setTasks","setSearchTasks","useEffect","response","query","filter","toLowerCase","includes","Container","maxWidth","currentTasks","Card","undefined","x","Boolean","window","location","hostname","match","ReactDOM","render","Fragment","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1ce39031.chunk.js","sourcesContent":["import React from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport { fade, makeStyles } from \"@material-ui/core/styles\";\nimport SearchIcon from \"@material-ui/icons/Search\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    display: \"none\",\n    [theme.breakpoints.up(\"sm\")]: {\n      display: \"block\",\n    },\n  },\n  search: {\n    right: \"1.5%\",\n    position: \"absolute\",\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    \"&:hover\": {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginLeft: 0,\n    width: \"100%\",\n    [theme.breakpoints.up(\"sm\")]: {\n      marginLeft: theme.spacing(1),\n      width: \"auto\",\n    },\n  },\n  searchIcon: {\n    padding: theme.spacing(0, 2),\n    height: \"100%\",\n    position: \"absolute\",\n    pointerEvents: \"none\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  inputRoot: {\n    color: \"inherit\",\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 0),\n    // vertical padding + font size from searchIcon\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n    transition: theme.transitions.create(\"width\"),\n    width: \"100%\",\n    [theme.breakpoints.up(\"sm\")]: {\n      width: \"12ch\",\n      \"&:focus\": {\n        width: \"20ch\",\n      },\n    },\n  },\n}));\n\nconst Header = ({ onSearchTask }) => {\n  const classes = useStyles();\n\n  // Header App Bar and Search Bar\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography className={classes.title} variant=\"h6\" noWrap>\n            Todo List\n          </Typography>\n          <div className={classes.search}>\n            <div className={classes.searchIcon}>\n              <SearchIcon />\n            </div>\n            <InputBase\n              placeholder=\"Searchâ€¦\"\n              classes={{\n                root: classes.inputRoot,\n                input: classes.inputInput,\n              }}\n              inputProps={{ \"aria-label\": \"search\" }}\n              onChange={(e) => onSearchTask(e.target.value)}\n            />\n          </div>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n\nexport default Header;\n","import React, { useState } from \"react\";\n\nimport {\n  List,\n  ListItem,\n  Checkbox,\n  IconButton,\n  ListItemText,\n} from \"@material-ui/core\";\nimport EditIconOutlined from \"@material-ui/icons/Edit\";\nimport DeleteOutlined from \"@material-ui/icons/DeleteOutlined\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\n\n// Determine if the checked attribute is true/false\nfunction check(checkNum) {\n  if (checkNum === 0) {\n    return false;\n  }\n  return true;\n}\n\n// Take in a prop tasks\nconst Tasks = ({\n  tasks,\n  onDeleteTask,\n  onEditTask,\n  onEditSearchTask,\n  onDeleteSearchTask,\n}) => {\n  const [checks, setChecks] = useState(true);\n  const [taskToEdit, setNewTask] = useState(\"\");\n  const [newTaskDescription, setNewDescription] = useState(\"\");\n  const [open, setOpen] = useState(false);\n\n  // Open Dialog modal\n  const handleTask = (value) => {\n    setNewTask(value);\n    setNewDescription(value.description);\n    setOpen(true);\n  };\n\n  // Close Dialog modal\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  // Pass in tasks variable as a prop\n  return (\n    <div>\n      <List>\n        {\n          // For each task we want to return a list item, use the id (unique) as a key\n          tasks.map((task) => {\n            // Render each task as a list item\n            return (\n              <ListItem key={task.id}>\n                <Checkbox\n                  onChange={async () => {\n                    // Determine if task will be checked or unchecked\n                    if (task.checked === 0) {\n                      task.checked = 1;\n                    } else {\n                      task.checked = 0;\n                    }\n                    // Update task as checked/not checked\n                    const res = await fetch(\"/api/checkTask\", {\n                      method: \"PUT\",\n                      headers: {\n                        \"Content-Type\": \"application/json\",\n                      },\n                      body: JSON.stringify({\n                        id: task.id,\n                        checked: task.checked,\n                      }),\n                    });\n                    if (res.ok) {\n                      // Update state task as checked/not checked\n                      return setChecks(!checks);\n                    }\n                  }}\n                  checked={check(task.checked)}\n                />\n                <ListItemText>{task.description}</ListItemText>\n                <IconButton\n                  aria-label=\"Edit Task\"\n                  onClick={() => handleTask(task)}\n                >\n                  <EditIconOutlined />\n                </IconButton>\n                <IconButton\n                  aria-label=\"Delete Task\"\n                  onClick={async () => {\n                    // Delete task\n                    const res = await fetch(\"/api/deleteTask\", {\n                      method: \"DELETE\",\n                      headers: {\n                        \"Content-Type\": \"application/json\",\n                      },\n                      body: JSON.stringify({ id: task.id }),\n                    });\n                    if (res.ok) {\n                      // Delete task from state list and search state list\n                      onDeleteTask(task);\n                      onDeleteSearchTask(task);\n                    }\n                  }}\n                >\n                  <DeleteOutlined />\n                </IconButton>\n              </ListItem>\n            );\n          })\n        }\n      </List>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">Edit Task</DialogTitle>\n        <DialogContent>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"name\"\n            label=\"New Description\"\n            type=\"email\"\n            fullWidth\n            defaultValue={taskToEdit.description}\n            onChange={(e) => setNewDescription(e.target.value)}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button\n            onClick={async () => {\n              // Update task with new description\n              const res = await fetch(\"/api/editTask\", {\n                method: \"PUT\",\n                headers: {\n                  \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                  id: taskToEdit.id,\n                  description: newTaskDescription,\n                }),\n              });\n              if (res.ok) {\n                // Update state list task and state list task\n                onEditTask({\n                  id: taskToEdit.id,\n                  description: newTaskDescription,\n                  checked: taskToEdit.checked,\n                });\n                onEditSearchTask({\n                  id: taskToEdit.id,\n                  description: newTaskDescription,\n                  checked: taskToEdit.checked,\n                });\n                setOpen(false);\n              }\n            }}\n            color=\"primary\"\n          >\n            Submit\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default Tasks;\n","import React, { useState } from \"react\";\nimport { TextField, Paper, Button, Grid } from \"@material-ui/core\";\n\nconst TaskForm = ({ onNewTask, onNewSearchTask }) => {\n  // State to store new task details\n  const [taskToAdd, setDescription] = useState(\"\");\n\n  return (\n    <Paper style={{ marginTop: 16, marginBottom: 16, padding: 16 }}>\n      <Grid container>\n        <Grid xs={10} md={11} item style={{ paddingRight: 16 }}>\n          <TextField\n            placeholder=\"Add Task Here\"\n            fullWidth\n            value={taskToAdd}\n            onChange={(e) => setDescription(e.target.value)}\n          />\n        </Grid>\n        <Grid xs={2} md={1} item>\n          <Button\n            onClick={async () => {\n              // Ignore empty submissions\n              if (taskToAdd.length === 0) {\n                return;\n              } else {\n                // Create new task\n                let newTask = {\n                  checked: 0,\n                  description: taskToAdd,\n                };\n                const res = await fetch(\"/api/addTask\", {\n                  method: \"POST\",\n                  headers: {\n                    \"Content-Type\": \"application/json\",\n                  },\n                  body: JSON.stringify(newTask),\n                });\n                if (res.ok) {\n                  // Add new task to state\n                  res.json().then((data) => {\n                    onNewTask({\n                      checked: 0,\n                      description: taskToAdd,\n                      id: data.id,\n                    });\n                  });\n                  setDescription(\"\");\n                }\n              }\n            }}\n          >\n            Submit\n          </Button>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n};\n\nexport default TaskForm;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\n\nimport { Container } from \"@material-ui/core\";\nimport Card from \"@material-ui/core/Card\";\n\nimport Header from \"./Components/Header\";\nimport Tasks from \"./Components/Tasks\";\nimport TaskForm from \"./Components/TaskForm\";\n\n// Check if the search task state is populated\nfunction chooseTaskList(tasks, searchTasks) {\n  if (searchTasks.length > 0) {\n    return searchTasks;\n  } else {\n    return tasks;\n  }\n}\n\nfunction App() {\n  // Once we get data from the api, we transfer it into state\n  const [tasks, setTasks] = useState([]);\n  const [searchTasks, setSearchTasks] = useState([]);\n\n  // Make Api call to Flask Server and render tasks (React Hooks)\n  // Only called when component first mounts\n  // URL is set in package.json with a Proxy (to prevent problems with CORS)\n  // UseEffect cannot use async/await\n  useEffect(() => {\n    fetch(\"/api/getTasks\").then((response) =>\n      response.json().then((data) => {\n        setTasks(data.tasks);\n      })\n    );\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Header\n        onSearchTask={(query) => {\n          if (query.length === 0) {\n            setSearchTasks((searchTasks) => []);\n          } else {\n            setSearchTasks(\n              tasks\n                .filter((item) =>\n                  item.description.toLowerCase().includes(query.toLowerCase())\n                )\n                .map((item) => item)\n            );\n          }\n        }}\n      ></Header>\n      <Container maxWidth=\"md\" style={{ marginBottom: 16 }}>\n        <TaskForm\n          // Add created task to state list\n          // Prop passed in to the task, called whenever there is a new task\n          onNewTask={(taskToAdd) =>\n            // Adding new task onto the end (opposite order to add to start)\n            setTasks((currentTasks) => [...currentTasks, taskToAdd])\n          }\n        ></TaskForm>\n        <Card>\n          <Tasks\n            tasks={chooseTaskList(tasks, searchTasks)}\n            // Find the task that has been edited and update state list\n            onEditTask={(task) => {\n              setTasks(\n                tasks.map((item) => {\n                  // Edited task found\n                  if (item.id === task.id) {\n                    return task;\n                  } else {\n                    return item;\n                  }\n                })\n              );\n            }}\n            // Update the task if edit action was done while search query was active\n            onEditSearchTask={(task) => {\n              setSearchTasks(\n                searchTasks.map((item) => {\n                  // Edited task found\n                  if (item !== undefined && item.id === task.id) {\n                    return task;\n                  } else {\n                    return item;\n                  }\n                })\n              );\n            }}\n            // Remove deleted task from state list\n            onDeleteTask={(task) =>\n              setTasks((currentTasks) => [\n                ...currentTasks.filter((x) => x !== task),\n              ])\n            }\n            // Remove deleted task from search state list\n            onDeleteSearchTask={(task) =>\n              setSearchTasks((currentTasks) => [\n                ...currentTasks.filter((x) => x !== task),\n              ])\n            }\n          />\n        </Card>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}